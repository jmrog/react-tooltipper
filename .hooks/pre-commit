#!/bin/sh
PATH=$PATH:/usr/local/bin:/usr/local/sbin

#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#

RESET='\033[0m'
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'

echo "${YELLOW}>>> pre-commit hook: checking for new commits${RESET}"

git remote -v update

LOCAL=$(git rev-parse @{0})
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})

if [ $LOCAL = $REMOTE ]; then
    echo "${GREEN}✓ NO NEW COMMITS!${RESET}"
    echo ""
    echo "${YELLOW}>>> pre-commit hook: running build${RESET}"

    npm run build &> /dev/null

    if [ $? -ne 1 ]; then
        echo "${GREEN}✓ BUILD COMPLETED!${RESET}"

        if [[ -z $(git ls-files --other --exclude-standard --directory) ]]; then
            exit 0
        else
            echo ""
            echo "${RED}⊘ DIRT REPO, TRY AGAIN!${RESET}"
            echo $(git ls-files --other --exclude-standard --directory)
            exit 1
        fi
    else
        echo "${RED}⊘ BUILD FAILED. NO CHEATING!${RESET}"
        exit 1
    fi
elif [ $LOCAL = $BASE ]; then
    echo ""
    echo "${RED}⊘ Error: There are new commits.${RESET}"
    cat <<\EOF
You need to pull before commiting. Please run:
git stash --keep-index
git pull
git stash pop

Or just "pull" if you have git-friendly installed

EOF
    exit 1
elif [ $REMOTE = $BASE ]; then
    echo "Need to push"
else
    echo "Diverged"
fi
